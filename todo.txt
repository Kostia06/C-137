- create Rust like errors 

- simplify the code as much as possible in LLVM IR

- implement Null value
    - create match for nil

- find best memory management
    - borrow checker
    - garbage collector
    - reference counting
    - something new

- find a way to change the type of a variable
    num1:i32      |   10:f32            

- add arrays


- add a way to handle nil value
    fn func(num: i32): i32?
        if num == 0; return nil
        return num
    fn main()
        
- add a type function
    - "hello world".split(" ")
    - 10.to_string()
    - 10.to_f32()
- add import file

- add += -= *= /= %= &= |= ^= <<= and >>= operators

- add in code error handling

- add ++ and -- operators

- default values for parameters in a function by position

- add unassigned variables

- create powerful macros like in rust

- make a simplifier that simplifies code to the fullest

- function methods like in julia

- add the return simplification like in rust

- http

- io file

- c bindings

- add goto

- add handle for strings

- add pattern matching

- add return tuple 

- finish the srting usage
    - good idea to turn every string into a char array, so that I can only edit array 

